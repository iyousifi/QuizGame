@using QuizGameBlazor.DataAccess
@using QuizGameBlazor.Models
@using Blazorise
@using FluentValidation;
@inject IQuestionRepository questionRepository
@inject IAnswerRepository answerRepository
@inject ITagsRepository tagsRepository
@inject IJSRuntime jsRuntime

<div class="modal" tabindex="-1" role="dialog" id="questionModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@QuestionObject" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <label for="text">Text</label>
                        <input type="hidden" @bind-value="@QuestionObject.Id" />
                        <InputText id="name" class="form-control" @bind-Value="@QuestionObject.Text" />
                    </div>

                    <div class="form-group">
                        <label for="difficultyLevel">Difficulty (1 easiest-10 hardest)</label>
                        <InputNumber id="Summary" class="form-control"
                                     @bind-Value="QuestionObject.DifficultyLevel" />

                    </div>
                    <div class="form-group">
                        <label for="categories">Categories</label>
                        <input type="text" value="@categoryString" class="form-control" data-role="tagsinput" />
                    </div>
                    <div class="form-group">
                        <RadioGroup TValue="int" Name="answerOptions" Buttons="true" CheckedValue="@_correctAnswerId" CheckedValueChanged="@SetCorrectAnswer">
                            @foreach (var item in QuestionObject.AnswerOptions)
                            {
                                <Radio TValue="int" Value="@item.Answer.Id" Checked="@item.IsCorrect">@item.Answer.Text</Radio>
                            }
                        </RadioGroup>
                    </div>
                    <div class="form-group">
                        <label for="AddAnswerOption">Add answer option</label>
                        <input class="form-control" @bind="@NewAnswerOption" @bind:event="oninput" @onkeypress="AddAnswer" />
                    </div>
                    <div class="form-group">
                        @foreach (var tag in Tags)
                        {

                            <button type="button" class="btn btn-info @(SelectedTags.Contains(tag.Id) ? "btn-danger" : "")" @onclick="(()=> ToggleTag(tag.Id))">@tag.Text</button>
                        }
                    </div>
                    <div class="form-group">
                        <label for="SearchAnswerOption">Search answer options</label>
                        <BlazoredTypeahead SearchMethod="SearchAnswer"
                                           @bind-Value="SelectedAnswer">
                            <SelectedTemplate Context="answer">
                                @answer.Text
                            </SelectedTemplate>
                            <ResultTemplate Context="answer">
                                @answer.Text
                            </ResultTemplate>
                        </BlazoredTypeahead>

                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@*<AnswerDetail AnswerObject="@answerObject" DataChanged="@DataChanged">

    </AnswerDetail>*@


@code {
    [Parameter]
    public QuizGameBlazor.Models.Question QuestionObject { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    private List<Tag> Tags;
    private string NewAnswerOption { get; set; }
    private string categoryString;
    private Answer answerObject;
    private List<int> SelectedTags;
    private List<string> CategoryTags;
    private HashSet<string> _initialCategories;
    private List<Answer> AnswerCache;
    private List<Answer> Answers;
    private Answer _selectedAnswer;
    public Answer SelectedAnswer
    {
        get => _selectedAnswer;
        set
        {
            QuestionObject.AnswerOptions.Add(new Models.AnswerOption { Answer = value, AnswerId = value.Id, IsCorrect = false });
            _selectedAnswer = value;
        }
    }
    private int _correctAnswerId;
    protected override async Task OnInitializedAsync()
    {
        Tags = new List<Tag>();
        Tags = await tagsRepository.GetTagsAsync(TagType.Answer);
        SelectedTags = new List<int>();
        CategoryTags = new List<string>();
    }


    private async Task ToggleTag(int id)
    {
        if (SelectedTags.Any(t => t == id))
            SelectedTags.Remove(id);
        else
            SelectedTags.Add(id);

    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "questionModal");
    }

    private async Task<IEnumerable<Models.Answer>> SearchAnswer(string searchText)
    {
        AnswerCache ??= await questionRepository.GetAnswers();
        if (SelectedTags.Any())
            return AnswerCache.Where(x => x.Text != null && x.Text.ToLower().Contains(searchText.ToLower()) && x.Tags.Any(t => SelectedTags.Contains(t.TagId)));
        return AnswerCache.Where(x => x.Text != null && x.Text.ToLower().Contains(searchText.ToLower()));
    }

    private async Task AddAnswer(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {

            var regex = new System.Text.RegularExpressions.Regex("\\B\\#\\w+");
            var tags = regex.Matches(NewAnswerOption);
            var tagStartPosition = NewAnswerOption.IndexOf('#');
            var answerText = tagStartPosition == -1 ? NewAnswerOption : NewAnswerOption.Substring(0, tagStartPosition);
            var existingAnswer = await answerRepository.FindAnswer(answerText.Trim());
            if (existingAnswer != null)
            {
                QuestionObject.AnswerOptions.Add(new AnswerOption { Answer = existingAnswer, AnswerId = existingAnswer.Id, IsCorrect = false });
            }
            else
            {


                var answerTags = new List<AnswerTags>();
                var existingTags = await tagsRepository.GetTagsAsync(TagType.Category);
                if (tags.Any())
                {
                    tags.ToList().ForEach(async t =>
                    {
                        var currentTag = existingTags.FirstOrDefault(tag => tag.Text.ToLower().Equals(t.Value.Substring(1)));
                        if (currentTag == null)
                            currentTag = await tagsRepository.AddTagAsync(new Tag { Text = t.Value.Substring(1), Type = TagType.Answer});

                        answerTags.Add(new AnswerTags { Tag = currentTag });
                    });
                }
                var newAnswer = await answerRepository.AddAsync(new Answer() { Text = answerText, Tags = answerTags });
                newAnswer.Tags = new List<AnswerTags>();
                QuestionObject.AnswerOptions.Add(new AnswerOption { Answer = newAnswer, AnswerId = newAnswer.Id, IsCorrect = false });
            }
            NewAnswerOption = string.Empty;
        }
    }
    public void InitializeAnswerObject()
    {
        answerObject = new Answer();
    }

    private void SetCorrectAnswer(int value)
    {
        QuestionObject.AnswerOptions.ForEach(x => x.IsCorrect = false);
        QuestionObject.AnswerOptions.First(x => x.AnswerId == value).IsCorrect = true;
        _correctAnswerId = value;
    }


    protected override async Task OnParametersSetAsync()
    {
        if (QuestionObject.AnswerOptions.Any())
            _correctAnswerId = QuestionObject.AnswerOptions.FirstOrDefault(x => x.IsCorrect).Answer.Id;

        _initialCategories = new HashSet<string>();
        if (QuestionObject.QuestionTags.Any())
        {
            _initialCategories = new HashSet<string>(QuestionObject.QuestionTags.Select(x => x.Tag.Text));
            categoryString = string.Join(",", QuestionObject.QuestionTags.Select(x => x.Tag.Text));
        }
        else
        {
            categoryString = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeAsync<object>("InitTagsInput");
    }


    private async void HandleValidSubmit()
    {
        CategoryTags = await jsRuntime.InvokeAsync<List<string>>("GetCategoryValue");
        if ((CategoryTags.Any() && !_initialCategories.SequenceEqual(CategoryTags)))
        {

            foreach (var ct in CategoryTags)
            {
                var tag = await tagsRepository.AddTagAsync(new Tag() { Text = ct, Type = TagType.Category});
                QuestionObject.QuestionTags.Add(new QuestionTags { Tag = tag, TagId = tag.Id });
            }
        }
        else
        {
            QuestionObject.QuestionTags = new List<QuestionTags>();
        }

        if (QuestionObject.Id == 0)
        {
            await questionRepository.Add(QuestionObject);
        }
        else
        {
            await questionRepository.Update(QuestionObject);
        }
        await CloseTaskModal();
        DataChanged?.Invoke();
    }
}